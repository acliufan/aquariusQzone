/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.3.10.v20160621
 * Generated at: 2019-07-12 16:39:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class WebSocketTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"/js/jquery-2.0.3.min.js\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        ul li {\r\n");
      out.write("            list-style: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #chatSpace {\r\n");
      out.write("            background: url('/img/chatBg.jpeg') no-repeat center center fixed;\r\n");
      out.write("            -webkit-background-size: cover;\r\n");
      out.write("            -moz-background-size: cover;\r\n");
      out.write("            -o-background-size: cover;\r\n");
      out.write("            background-size: cover;\r\n");
      out.write("        / / 这条一定要\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("欢迎,<span id=\"yourName\" style=\"text-decoration-style: solid\"></span>\r\n");
      out.write("<br/>\r\n");
      out.write("<input id=\"subject\" type=\"text\" placeholder=\"请输入要发送的人名字\"/>\r\n");
      out.write("<hr/>\r\n");
      out.write("<textarea id=\"text\" name=\"text\" placeholder=\"请输入聊天内容\"></textarea>\r\n");
      out.write("<button id=\"sendText\" onclick=\"send()\">发送消息</button>\r\n");
      out.write("<hr/>\r\n");
      out.write("<button onclick=\"closeWebSocket()\">关闭WebSocket连接</button>\r\n");
      out.write("<button onclick=\"openWebsocket()\">打开WebSocket连接</button>\r\n");
      out.write("<button onclick=\"removeLogs()\">清空日志</button>\r\n");
      out.write("<hr/>\r\n");
      out.write("<div id=\"chatSpace\" style=\"height: 400px;overflow-y: auto\">\r\n");
      out.write("    <ul id=\"message\" class=\"marquee\" style=\"width: auto\">\r\n");
      out.write("    </ul>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("    var websocket = null;\r\n");
      out.write("    var userName = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("    $(\"#yourName\").text(userName);\r\n");
      out.write("    $(function () {\r\n");
      out.write("        reconnectWebsocket();\r\n");
      out.write("    })\r\n");
      out.write("    function openWebsocket() {\r\n");
      out.write("        websocket.close();\r\n");
      out.write("        reconnectWebsocket();\r\n");
      out.write("    }\r\n");
      out.write("    function reconnectWebsocket() {\r\n");
      out.write("//        var websocket = null;\r\n");
      out.write("        //判断当前浏览器是否支持WebSocket\r\n");
      out.write("        if ('WebSocket' in window) {\r\n");
      out.write("            var name = window.location.host;\r\n");
      out.write("            websocket = new WebSocket(\"ws://\" + name + \"/WebSocket/chat/\" + userName);\r\n");
      out.write("            //连接发生错误的回调方法\r\n");
      out.write("            websocket.onerror = function (evt) {\r\n");
      out.write("                setMessageInnerHTML(getCurrentTime() + \"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\" + \"<span style=\\\"color:black\\\">WebSocket连接发生错误</span>\");\r\n");
      out.write("                setTimeout(function () {\r\n");
      out.write("                    reconnectWebsocket();\r\n");
      out.write("                }, 5000);//每隔5s去重连\r\n");
      out.write("            };\r\n");
      out.write("            //连接成功建立的回调方法\r\n");
      out.write("            websocket.onopen = function (evt) {\r\n");
      out.write("//                setMessageInnerHTML(getCurrentTime()+\"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\"+\"<span style=\\\"color:lawngreen\\\">WebSocket连接成功</span>\");\r\n");
      out.write("//                //连接产生后，开始定时器10s，实现心跳探测\r\n");
      out.write("                alert(\"websocket建立成功\");\r\n");
      out.write("//                heartCheck.start();\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            //接收到消息的回调方法\r\n");
      out.write("            websocket.onmessage = function (event) {\r\n");
      out.write("                //发完消息后，开始定时器10s，心跳探测\r\n");
      out.write("                $(\"input[name='text']\").val(\"\").focus();\r\n");
      out.write("                if ((event.data).indexOf(\"heartBeat\") != -1) {\r\n");
      out.write("                    //服务端返回心跳成功响应\r\n");
      out.write("                    console.log(event.data);\r\n");
      out.write("                } else {\r\n");
      out.write("                    var showedMessages;\r\n");
      out.write("                    var sendName;\r\n");
      out.write("                    var result = JSON.parse(event.data);\r\n");
      out.write("                    if (typeof(result.msg) != 'undefined') {\r\n");
      out.write("                        showedMessages = result.msg;\r\n");
      out.write("                    }\r\n");
      out.write("                    if (typeof(result.name) != 'undefined') {\r\n");
      out.write("                        sendName = result.name;\r\n");
      out.write("                    }\r\n");
      out.write("                    debugger\r\n");
      out.write("                    if (sendName == \"系统提示\") {\r\n");
      out.write("                        alert(\"对方不在线\");\r\n");
      out.write("                    } else {\r\n");
      out.write("                        if (sendName != userName) {\r\n");
      out.write("                            left_setMessageInnerHTML(sendName + \":\" + \"<span style=\\\"color:black;\\\">\" + showedMessages + \"</span>\");\r\n");
      out.write("                        } else {\r\n");
      out.write("                            right_setMessageInnerHTML(sendName + \":\" + \"<span style=\\\"color:black;\\\">\" + showedMessages + \"</span>\");\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("//                else {\r\n");
      out.write("//                    setMessageInnerHTML(getCurrentTime() + \"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\" + \"<span style=\\\"color:#1034fc\\\">\" + event.data);\r\n");
      out.write("//                }\r\n");
      out.write("//                heartCheck.reset();\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            //连接关闭的回调方法\r\n");
      out.write("            websocket.onclose = function (evt) {\r\n");
      out.write("//                setMessageInnerHTML(getCurrentTime()+\"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\"+\"WebSocket连接关闭\");\r\n");
      out.write("                alert(\"WebSocket连接关闭\");\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\r\n");
      out.write("            window.onbeforeunload = function () {\r\n");
      out.write("                closeWebSocket();\r\n");
      out.write("            }\r\n");
      out.write("        } else {\r\n");
      out.write("            alert(getCurrentTime() + \"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\" + '当前浏览器 Not support websocket');\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    //发送消息给后端\r\n");
      out.write("    function send() {\r\n");
      out.write("        var message = new Object();\r\n");
      out.write("        var infos = $(\"#text\").val();\r\n");
      out.write("        if (infos == \"\" || infos == undefined) {\r\n");
      out.write("            alert(\"请输入要发送的消息\");\r\n");
      out.write("            return false;\r\n");
      out.write("        }\r\n");
      out.write("        message.msg = $(\"#text\").val();\r\n");
      out.write("        message.name = userName;\r\n");
      out.write("        var subject = $(\"#subject\").val();\r\n");
      out.write("        if (subject == \"\" || subject == undefined) {\r\n");
      out.write("            alert(\"接收方不能为空！\");\r\n");
      out.write("            return false;\r\n");
      out.write("        }\r\n");
      out.write("        message.subject = $(\"#subject\").val();\r\n");
      out.write("//        document.getElementById('message').innerHTML += userName + ':' + infos + '<br/>';\r\n");
      out.write("//        setMessageInnerHTML(userName+\":\"+\"<span style=\\\"color:#1034fc\\\">\" + infos+\"</span>\");\r\n");
      out.write("        right_setMessageInnerHTML(userName + \":\" + \"<span style=\\\"color:black;\\\">\" + infos + \"</span>\");\r\n");
      out.write("        //如果是JS对象{\"key\":\"value\"}则解析为字符串\r\n");
      out.write("        websocket.send(JSON.stringify(message));\r\n");
      out.write("    }\r\n");
      out.write("    //将消息显示在网页上\r\n");
      out.write("    function right_setMessageInnerHTML(innerHTML) {\r\n");
      out.write("        $(\"#message\").append(\"<li style=\\\"margin-bottom:5px;border:5px solid white;float: right;background-color: greenyellow\\\">\" + innerHTML + \"</li><br><br>\");\r\n");
      out.write("    }\r\n");
      out.write("    function setMessageInnerHTML(innerHTML) {\r\n");
      out.write("        $(\"#message\").append(\"<li>\" + innerHTML + \"</li><br>\");\r\n");
      out.write("    }\r\n");
      out.write("    function left_setMessageInnerHTML(innerHTML) {\r\n");
      out.write("        $(\"#message\").append(\"<li style=\\\"margin-bottom:5px;border:5px solid white;float: left\\;background-color: deepskyblue;\\\">\" + innerHTML + \"</li><br><br>\");\r\n");
      out.write("    }\r\n");
      out.write("    //关闭WebSocket连接\r\n");
      out.write("    function closeWebSocket() {\r\n");
      out.write("        websocket.close();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    /*\r\n");
      out.write("     websocket是前后端交互的长连接，\r\n");
      out.write("     那么前后端就必须有一个反馈提醒，采用心跳重连。\r\n");
      out.write("     使用原生websocket的时候，如果设备网络断开，\r\n");
      out.write("     不会触发websocket的任何事件函数，\r\n");
      out.write("     浏览器便会立刻或者一定短时间后触发onClose函数。\r\n");
      out.write("     */\r\n");
      out.write("\r\n");
      out.write("    /*\r\n");
      out.write("     后端也可能出现异常，连接断开后前段并没有收到通知，\r\n");
      out.write("     因此需要前段定时发送心跳消息ping，\r\n");
      out.write("     后端收到Ping，立马返回pong消息，告知前端连接正常，\r\n");
      out.write("     否则前端执行重连\r\n");
      out.write("     */\r\n");
      out.write("    /*\r\n");
      out.write("     1. 在chrome中，如果心跳检测 也就是websocket实例执行send之后，15秒内没发送到另一接收端，onclose便会执行。那么超时时间是15秒。\r\n");
      out.write("     2. 我又打开了Firefox ，Firefox在断网7秒之后，直接执行onclose。说明在Firefox中不需要心跳检测便能自动onclose。\r\n");
      out.write("     3.  同一代码， reconnect方法 在chrome 执行了一次，Firefox执行了两次。当然我们在几处地方（代码逻辑处和websocket事件处）绑定了reconnect()，\r\n");
      out.write("     所以保险起见，我们还是给reconnect()方法加上一个锁，保证只执行一次\r\n");
      out.write("     */\r\n");
      out.write("\r\n");
      out.write("    //    1、判断前端ws断开\r\n");
      out.write("    //    2、判断后端断开：\r\n");
      out.write("    var heartCheck = {\r\n");
      out.write("        timeout: 10000,//10s\r\n");
      out.write("        timeoutObj: null,\r\n");
      out.write("        reset: function () {\r\n");
      out.write("            clearTimeout(this.timeoutObj);\r\n");
      out.write("            this.start();\r\n");
      out.write("        },\r\n");
      out.write("        start: function () {\r\n");
      out.write("            this.timeoutObj = setTimeout(function () {\r\n");
      out.write("                websocket.send(\"heartBeat\");\r\n");
      out.write("            }, this.timeout)\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    //    //函数放在onclose里\r\n");
      out.write("    //    websocket.onclose = disConnect;\r\n");
      out.write("    function getCurrentTime() {\r\n");
      out.write("        var separator1 = \"-\";\r\n");
      out.write("        var separetor2 = \":\";\r\n");
      out.write("        var date = new Date();\r\n");
      out.write("        var month = date.getMonth() + 1;\r\n");
      out.write("        var strDate = date.getDate();\r\n");
      out.write("        var hour = date.getHours();\r\n");
      out.write("        var minute = date.getMinutes();\r\n");
      out.write("        var second = date.getSeconds();\r\n");
      out.write("        if (hour >= 0 && hour <= 9) {\r\n");
      out.write("            hour = \"0\" + hour;\r\n");
      out.write("        }\r\n");
      out.write("        if (minute >= 0 && minute <= 9) {\r\n");
      out.write("            minute = \"0\" + minute;\r\n");
      out.write("        }\r\n");
      out.write("        if (second >= 0 && second <= 9) {\r\n");
      out.write("            second = \"0\" + second;\r\n");
      out.write("        }\r\n");
      out.write("        if (month >= 1 && month <= 9) {\r\n");
      out.write("            month = \"0\" + month;\r\n");
      out.write("        }\r\n");
      out.write("        if (strDate >= 0 && strDate <= 9) {\r\n");
      out.write("            strDate = \"0\" + strDate;\r\n");
      out.write("        }\r\n");
      out.write("        var currentdate = date.getFullYear() + separator1 + month + separator1 + strDate + \" \" + hour + separetor2 + minute + separetor2 + second;\r\n");
      out.write("        return currentdate;\r\n");
      out.write("    }\r\n");
      out.write("    function removeLogs() {\r\n");
      out.write("        $(\"#message\").find(\"li\").remove();\r\n");
      out.write("        $(\"#message\").find(\"br\").remove();\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("    $('div.marquee').each(function () {\r\n");
      out.write("        if (this.scrollHeight > this.offsetHeight) $(this).html('<marquee behavior=\"scroll\" direction=\"up\" scrollamount=\"1\" height=\"140\" onmouseover=\"this.stop()\" onmouseout=\"this.start()\">' + this.innerHTML + '</marquee>');\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
